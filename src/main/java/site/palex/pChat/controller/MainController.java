package site.palex.pChat.controller;

import site.palex.pChat.domain.Message;
import site.palex.pChat.repos.MessageRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;


import java.util.Map;


@Controller //Контроллер это модуль, который слушает запросы на сервер и возвращает нужный ответ
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MessageRepo messageRepo;

    //@RequestParam эта аннотация связывает значение запроса String name c параметром name метода greeting()
    //Этот параметр запроса не является обязательным, если он отсутствует в запросе, то используется значение по умолчанию World.
    //Значение параметра name добавляется к объекту Model и в итоге делает его доступным для шаблона представления
    //model.addAttribute("name", name);
    @GetMapping("/")    //эта аннотация гарантирует, что HTTP-request GET к /greeting отображаются в методе greeting()// Map ONLY GET Requests
    public String greeting(Map<String, Object> model){
        return "greeting";
    }

    @GetMapping("/main")
    public String main(Map<String, Object> model) {
        Iterable<Message> messages = messageRepo.findAll();

        model.put("messages", messages);

        return "main";
    }

    @PostMapping("/main")
    public String add(@RequestParam String text, @RequestParam String tag, Map<String, Object> model) {
        Message message = new Message(text, tag);

        messageRepo.save(message);

        Iterable<Message> messages = messageRepo.findAll();

        model.put("messages", messages);

        return "main";
    }

    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    // Выдергивает из запросов из формы или URL значения

    @PostMapping("filter")
    public String filter(@RequestParam String filter, Map<String, Object> model) {
        Iterable<Message> messages;             //Iterable - потому что он выше в иерархии чем List

        if (filter != null && !filter.isEmpty()) {
            messages = messageRepo.findByTag(filter);   //Возвращает List
        } else {
            messages = messageRepo.findAll();           //Возвращает Iterable
        }

        model.put("messages", messages);

        return "main";
    }
}
